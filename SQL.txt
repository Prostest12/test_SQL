-- task 1

WITH RECURSIVE dates AS (
  SELECT CURDATE() AS date, 1 AS n
  UNION ALL
  SELECT DATE_ADD(date, INTERVAL (FLOOR(RAND() * 6) + 2) DAY), n+1
  FROM dates
  WHERE n < 100
)
SELECT date FROM dates;

-- task 2

SELECT e.id, e.name, s.sales_c, s.sales_rank_c, s.sales_s, s.sales_rank_s
FROM employee AS e
JOIN (
    SELECT 
        employee_id,
        COUNT(*) AS sales_c,
        DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS sales_rank_c,
        SUM(price) AS sales_s,
        DENSE_RANK() OVER (ORDER BY SUM(price) DESC) AS sales_rank_s
    FROM sales
    GROUP BY employee_id
) AS s ON e.id = s.employee_id
ORDER BY s.sales_c DESC, s.sales_s DESC;

-- task 3

SELECT 
    from_id AS acc,
    MIN(tdate) AS dt_from,
    COALESCE(MAX(prev_tdate), '3000-01-01') AS dt_to,
    SUM(amount) AS balance
FROM transfers t1
LEFT JOIN (SELECT from_id, tdate AS prev_tdate FROM transfers) t2 ON t1.from_id = t2.from_id AND t1.tdate > t2.prev_tdate
GROUP BY acc, balance
HAVING MIN(tdate) = dt_from
UNION
SELECT 
    from_id AS acc,
    MAX(tdate) AS dt_from,
    '3000-01-01' AS dt_to,
    SUM(amount) AS balance
FROM transfers
GROUP BY acc, balance
HAVING COUNT(*) = 1;