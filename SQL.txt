-- task 1

WITH RECURSIVE dates AS (
  SELECT CURDATE() AS date, 1 AS n
  UNION ALL
  SELECT DATE_ADD(date, INTERVAL (FLOOR(RAND() * 6) + 2) DAY), n+1
  FROM dates
  WHERE n < 100
)
SELECT date FROM dates;

-- task 2

SELECT e.id, e.name, s.sales_c, s.sales_rank_c, s.sales_s, s.sales_rank_s
FROM employee AS e
JOIN (
    SELECT 
        employee_id,
        COUNT(*) AS sales_c,
        DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS sales_rank_c,
        SUM(price) AS sales_s,
        DENSE_RANK() OVER (ORDER BY SUM(price) DESC) AS sales_rank_s
    FROM sales
    GROUP BY employee_id
) AS s ON e.id = s.employee_id
ORDER BY s.sales_c DESC, s.sales_s DESC;

-- task 3

WITH recursive account_periods AS (
  SELECT
    from_id AS acc,
    tdate AS dt_from,
    tdate AS dt_to,
    -amount AS balance  
  FROM
    transfers
  UNION ALL
  SELECT
    ap.acc,
    CASE WHEN tdate = DATE_ADD(ap.dt_to, INTERVAL 1 DAY) THEN ap.dt_from ELSE tdate END,
    CASE WHEN tdate = DATE_ADD(ap.dt_to, INTERVAL 1 DAY) THEN tdate ELSE '3000-01-01' END,
    CASE WHEN to = ap.acc THEN amount ELSE -amount END 
  FROM
    transfers t
    INNER JOIN account_periods ap ON ap.acc = t.from_id AND ap.dt_to >= t.tdate - INTERVAL 1 DAY
)
SELECT
  acc,
  DATE_FORMAT(dt_from, '%d.%m.%Y') AS dt_from,
  DATE_FORMAT(dt_to, '%d.%m.%Y') AS dt_to,
  SUM(balance) AS balance
FROM
  account_periods
GROUP BY
  acc, dt_from, dt_to
ORDER BY
  acc, dt_from;